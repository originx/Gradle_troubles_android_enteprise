apply plugin: 'com.android.application'
//apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'com.github.triplet.play'
apply from: '../jacoco-unit-tests.gradle'
// --------------------------------------------------------------------------

apply plugin: 'spoon'

spoon {
    adbTimeout = 120 // 120 seconds
    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }
    ignoreFailures = true
    debug = true
    noAnimations = false
    codeCoverage = false
    // To grant permissions to Android M >= devices */
    grantAllPermissions = true
}

android {
    adbOptions {
        timeOutInMs 120 * 1000 // 120 seconds
    }
    compileOptions {
        sourceCompatibility versions.android.javaVersion
        targetCompatibility versions.android.javaVersion
    }

    

    compileSdkVersion versions.android.compileSdk
    buildToolsVersion versions.android.buildTools

    dataBinding {
        enabled = true
    }

    dexOptions {
        jumboMode true
        //attempt to use the build cache
//        preDexLibraries preDexEnabled
        javaMaxHeapSize "4g"
        maxProcessCount = 8
    }

    signingConfigs {
        debug {
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    defaultConfig {
        applicationId "de.companyname.app.multidexfail"

        if (isProduction) { //Override Appname for production builds, so this is NOT country specific anymore
            resValue "string", "app_name_country", "companyname"
        }

        minSdkVersion versions.android.minSdk
        targetSdkVersion versions.android.targetSdk

        buildConfigField "String", "BUILD_REVISION", "\"${revision}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "boolean", "IS_PRODUCTION", "${isProduction}"
        buildConfigField "boolean", "IS_BETA", "${isBeta}"

        testInstrumentationRunner "espresso.fail.multidex.CustomJunitRunner"

        multiDexEnabled true
    }

    buildTypes {

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro', '../proguardRules/proguard-debug-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro', '../proguardRules/proguard-debug-test-rules.pro'
            testCoverageEnabled false
            multiDexKeepProguard file('../proguardRules/multidex-proguard.pro')
        }
        release {
            minifyEnabled true
            shrinkResources true
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro'
        }
    }

    // country flavor overrides pay flavor which overrides defaultConfig
    // keep the order exactly like this!
    flavorDimensions 'pay', 'country', 'api'

    // not all product flavor combinations are valid, we're ignoring a couple, see below
    productFlavors {
        /* Feature-Flags */
        def PAY_START = "PAY_START"
        // Have to override versionName here, since versionNameSuffix is not yet supported for flavors:
        // https://code.google.com/p/android/issues/detail?id=59614
        pay {
            dimension 'pay'
        }
        nonpay {
            dimension 'pay'
        }
        bleeding {
            dimension 'api'
            minSdkVersion 21
        }
        compat {
            dimension 'api'
        }
        germany {
            dimension 'country'
            signingConfig signingConfigs.debug
            applicationId "de.companyname.client.android"
            buildConfigField "boolean", PAY_START, "true"
            versionCode appVersionCodeDE
            versionName appVersionNameDE
            resConfigs "de"
        }
        italy {
            dimension 'country'
            signingConfig signingConfigs.debug
            applicationId "it.companyname.client.android"
            versionCode appVersionCodeIT
            versionName appVersionNameIT
            resConfigs "it"
        }
        mexico {
            dimension 'country'
            signingConfig signingConfigs.debug
            applicationId "mx.companyname.client.android"
            versionCode appVersionCodeMX
            versionName appVersionNameMX
            resConfigs "es"
        }
        unitedStates {
            dimension 'country'
            signingConfig signingConfigs.debug
            applicationId "com.companyname.productName"
            versionCode appVersionCodeUS
            versionName appVersionNameUS
            minSdkVersion versions.android.productNameMinSdk
            resConfigs "en"
        }
    }

    lintOptions {
        baseline file("lint/lint-baseline.xml")
        checkAllWarnings false
        warningsAsErrors false
        //disabling check until lint NPE is fixed
        //https://code.google.com/p/android/issues/detail?id=230238
        disable 'NewerVersionAvailable', 'LintBaseline'
        abortOnError true
    }

    applicationVariants.all { variant ->
        variant.assemble.doLast {
            //def originZipAlignedApkFile = variant.outputs[0].outputFile;
            def apiLevel = versions.android.minSdk;
            def FLAVOR_DIMENSION_SIZE = 3
            for (int i = 0; i < FLAVOR_DIMENSION_SIZE; i++) {
                if (variant.productFlavors[i].minSdkVersion != null) {
                    apiLevel = variant.productFlavors[i].minSdkVersion.apiLevel
                }
            }
            def renameZipAlignedApkFile = ("companyname_" + variant.productFlavors[0].name + "_"
                    + variant.productFlavors[1].name + "_"
                    + "api" + apiLevel + "_"
                    + variant.buildType.name + "_"
                    + (isProduction.toBoolean() ? "prod_" : "")
                    + (isBeta.toBoolean() ? "beta_" : "")
                    + variant.mergedFlavor.versionName + "r${revision}.apk")
            //copy {
            //    from "$originZipAlignedApkFile"
            //    into "$originZipAlignedApkFile.parent"
            //    rename("$originZipAlignedApkFile.name", "$renameZipAlignedApkFile")
            //}
        }
    }

    // ignore impossible variants
    variantFilter { variant ->
        if (variant.getFlavors().get(0).name == 'pay' &&
                !variant.getFlavors().get(1).name.startsWith("germany")) {
            variant.setIgnore(true);
        }
        if (variant.getFlavors().get(0).name == 'nonpay' &&
                variant.getFlavors().get(1).name.startsWith("germany")) {
            variant.setIgnore(true);
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude '.readme'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/rxjava.properties'
    }

}

// ------------------------------------------------------------------------------------------

dependencies {
    annotationProcessor libraries.daggerCompiler
    annotationProcessor libraries.butterknifeCompiler

    implementation project(':core')
    implementation project(':pay')

    debugCompile libraries.leakcanary
    releaseCompile libraries.leakcanaryNoOp

    compile libraries.supportAppcompat
    compile libraries.supportAnnotations
    compile libraries.supportAnnotations
    compile libraries.supportRecyclerview
    compile libraries.supportCardview
    compile libraries.supportDesign
    compile libraries.supportMultidex
    // do not remove from app.gradle or firebase will crash when receiving messages
    compile libraries.playServicesLocation
    compile libraries.dagger
    provided libraries.jsr250
    compile libraries.eventbus
    compile libraries.butterknife
    compile libraries.commonsCollections4
    compile libraries.libphonenumber
    compile(libraries.validationKomensky) {
        exclude group: 'com.google.android', module: 'support-v4'
    }


    testAnnotationProcessor libraries.daggerCompiler
    testCompile libraries.supportAnnotations
    testCompile libraries.leakcanaryNoOp
    testCompile libraries.junit
    testCompile libraries.eventbus //FIXME Is this necessary? There is already a compile libraries.eventbus
    testCompile libraries.robolectric
    testCompile libraries.robolectricShadowsCore
    testCompile libraries.robolectricShadowsSupportV4
    testCompile libraries.robolectricShadowsMultidex
    testCompile libraries.robolectricShadowsPlayServices
    testCompile libraries.robolectricShadowsHttpClient
    testCompile libraries.mockito

    androidTestAnnotationProcessor libraries.daggerCompiler
    androidTestCompile libraries.supportAnnotations
    androidTestCompile libraries.dagger
    androidTestCompile libraries.rxjava2 //FIXME Is this needed? It is already added in Core
//    androidTestCompile(libraries.rxandroid) { //FIXME Is this needed? It is already added in Core
//        exclude group: 'io.reactivex:rxjava', module: 'rxjava'
//    }
    androidTestCompile libraries.eventbus //FIXME Is this necessary? There is already a compile libraries.eventbus
    androidTestCompile libraries.mockito
    androidTestCompile libraries.junit
    androidTestCompile libraries.dexmaker
    androidTestCompile libraries.dexmakerMockito
    androidTestCompile libraries.spoon
    androidTestCompile libraries.okhttp3Mockwebserver

    // there is a conflict with the test support library (see http://stackoverflow.com/questions/29857695)
    // so for now re exclude the support-annotations dependency from here to avoid clashes
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
        exclude group: 'com.google.code.findbugs'
        // FIXME http://stackoverflow.com/questions/37347326/errorconflict-with-dependency-com-google-code-findbugsjsr305
    }
    // exclude a couple of more modules here because of <http://stackoverflow.com/questions/29216327> and
    // more specifically of <https://code.google.com/p/android-test-kit/issues/detail?id=139>
    // otherwise you'll receive weird crashes on devices and dex exceptions on emulators
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
        exclude group: 'com.google.code.findbugs'
    }
    //excluded specific packages due to https://code.google.com/p/android/issues/detail?id=183454 -.-´´
    androidTestCompile('com.android.support.test.espresso:espresso-intents:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
        exclude group: 'com.google.code.findbugs'
    }

    androidTestCompile('com.android.support.test.espresso:espresso-web:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
        exclude group: 'com.google.code.findbugs'
    }

    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
        exclude group: 'com.google.code.findbugs'
    }
    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v7'
    }

    /**
     * uiautomator requires minSdkVersion=18. since the flag 'tools:overrideLibrary' isn't working properly we either
     * have to increse minSdkVersion to 18 or have different flavor for testing this stuff or not use uiautomator at all
     */
//    androidTestCompile('com.android.support.test.uiautomator:uiautomator-v18:2.1.2') {
//        exclude group: 'com.android.support', module: 'support-annotations'
//        exclude module: 'support-annotations'
//        exclude module: 'recyclerview-v7'
//        exclude module: 'support-v4'
//        exclude module: 'support-v7'
//    }
}


// -------------
def addVersionInformation(country, appVersionMajor, appVersionMinor, appVersionPatch) {
    File file = new File(rootProject.projectDir, "app/release_docs/release_notes_${country}.txt")
    file.delete();
    file.createNewFile();
    String releaseType = System.getenv("RELEASE_TYPE")
    if (releaseType.equals("Production")) {
        file.append("------- RELEASE CANDIDATE -------\n");
    } else if (releaseType.equals("Alpha") || releaseType.equals("Beta")) {
        file.append("------- " + releaseType.toUpperCase() + " -------\n");
    }
    file.append("${appVersionMajor}.${appVersionMinor}.${appVersionPatch}r${revision}")
    if (System.getenv("BRANCH_NAME") != null) {
        file.append("\nBranch: " + System.getenv("BRANCH_NAME"));
    } else {
        file.append("\nUnknown branch");
    }
    if (System.getenv("JOB_NAME") != null) {
        file.append("\nJob: " + System.getenv("JOB_NAME"));
    } else {
        file.append("\nJob: <local gradle build>");
    }
    file.append("\nsendExternalPartners: ${sendExternalPartners}");
    file.append("\nisBeta: ${isBeta}");
    file.append("\nisProduction: ${isProduction}");
    file.append("\n\nChangelog: " + System.getenv("CHANGELOG"));
    return file;
}

//----------------------------Espresso permissions grant--------------------------------------
android.applicationVariants.all { variant ->
    def applicationId = variant.applicationId
    def adb = android.getAdbExe().toString()
    def variantName = variant.name.capitalize()
    def grantPermissionTask = tasks.create("grant${variantName}Permissions") << {
        "${adb} devices".execute().text.eachLine {
            if (it.endsWith("device")) {
                def device = it.split()[0]
                println "Granting permissions on devices ${device}"
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_FINE_LOCATION".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WAKE_LOCK".execute()
            }
        }
    }
}

// ------------------------------------------------------------------------------------------

task buildDE(dependsOn: ['assemblePayGermanyCompatDebug',
                         'compilePayGermanyCompatDebugUnitTestSources',
                         ':core:compileGermanyDebugUnitTestSources',
                         ':pay:compileGermanyDebugUnitTestSources',
                         'compilePayGermanyCompatDebugAndroidTestSources',
                         ':core:compileGermanyDebugAndroidTestSources',
                         'lintPayGermanyCompatDebug',
                         ':core:lintGermanyDebug',
                         ':pay:lintGermanyDebug',
                         'testPayGermanyCompatDebugUnitTest',
                         'testPayGermanyCompatDebugUnitTestCoverage',
                         ':core:testGermanyDebugUnitTest',
                         ':core:testGermanyDebugUnitTestCoverage',
                         ':pay:testGermanyDebugUnitTest',
                         ':pay:testGermanyDebugUnitTestCoverage',
                         'assemblePayGermanyCompatRelease',
                         'compilePayGermanyCompatReleaseUnitTestSources',
                         ':core:compileGermanyReleaseUnitTestSources',
                         ':pay:compileGermanyReleaseUnitTestSources',
//                         'lintPayGermanyCompatRelease',
//                         ':core:lintGermanyRelease',
//                         ':pay:lintGermanyRelease',
                         'testPayGermanyCompatReleaseUnitTest',
                         'testPayGermanyCompatReleaseUnitTestCoverage',
                         ':core:testGermanyReleaseUnitTest',
                         ':core:testGermanyReleaseUnitTestCoverage',
                         ':pay:testGermanyReleaseUnitTest',
                         ':pay:testGermanyReleaseUnitTestCoverage']) {
    description = "For DE: Build, runs unit tests and lint check, assembles german debug and release version"
}


task buildIT(dependsOn: ['assembleNonpayItalyCompatDebug',
                         'compileNonpayItalyCompatDebugUnitTestSources',
                         ':core:compileItalyDebugUnitTestSources',
                         'compileNonpayItalyCompatDebugAndroidTestSources',
                         ':core:compileItalyDebugAndroidTestSources',
                         'lintNonpayItalyCompatDebug',
                         ':core:lintItalyDebug',
                         'testNonpayItalyCompatDebugUnitTest',
                         'testNonpayItalyCompatDebugUnitTestCoverage',
                         ':core:testItalyDebugUnitTest',
                         ':core:testItalyDebugUnitTestCoverage',
                         'assembleNonpayItalyCompatRelease',
                         'compileNonpayItalyCompatReleaseUnitTestSources',
                         ':core:compileItalyReleaseUnitTestSources',
//                         'lintNonpayItalyCompatRelease',
//                         ':core:lintItalyRelease',
                         'testNonpayItalyCompatReleaseUnitTest',
                         'testNonpayItalyCompatReleaseUnitTestCoverage',
                         ':core:testItalyReleaseUnitTest',
                         ':core:testItalyReleaseUnitTestCoverage']) {
    description = "For IT: Build, runs unit tests, instrumentation tests and lint check, assembles italian debug and release version"
}

task buildMX(dependsOn: ['assembleNonpayMexicoCompatDebug',
                         'compileNonpayMexicoCompatDebugUnitTestSources',
                         ':core:compileMexicoDebugUnitTestSources',
                         'compileNonpayMexicoCompatDebugAndroidTestSources',
                         ':core:compileMexicoDebugAndroidTestSources',
                         'lintNonpayMexicoCompatDebug',
                         ':core:lintMexicoDebug',
                         'testNonpayMexicoCompatDebugUnitTest',
                         'testNonpayMexicoCompatDebugUnitTestCoverage',
                         ':core:testMexicoDebugUnitTest',
                         ':core:testMexicoDebugUnitTestCoverage',
                         'assembleNonpayMexicoCompatRelease',
                         'compileNonpayMexicoCompatReleaseUnitTestSources',
                         ':core:compileMexicoReleaseUnitTestSources',
//                         'lintNonpayMexicoCompatRelease',
//                         ':core:lintMexicoRelease',
                         'testNonpayMexicoCompatReleaseUnitTest',
                         'testNonpayMexicoCompatReleaseUnitTestCoverage',
                         ':core:testMexicoReleaseUnitTest',
                         ':core:testMexicoReleaseUnitTestCoverage']) {
    description = "For MX: Build, runs unit tests, instrumentation tests and lint check, assembles mexican debug and release version"
}

task buildUS(dependsOn: ['assembleNonpayUnitedStatesCompatDebug',
                         'compileNonpayUnitedStatesCompatDebugUnitTestSources',
                         ':core:compileUnitedStatesDebugUnitTestSources',
                         'compileNonpayUnitedStatesCompatDebugAndroidTestSources',
                         ':core:compileUnitedStatesDebugAndroidTestSources',
                         'lintNonpayUnitedStatesCompatDebug',
                         ':core:lintUnitedStatesDebug',
                         'testNonpayUnitedStatesCompatDebugUnitTest',
                         'testNonpayUnitedStatesCompatDebugUnitTestCoverage',
                         ':core:testUnitedStatesDebugUnitTest',
                         ':core:testUnitedStatesDebugUnitTestCoverage',
                         'assembleNonpayUnitedStatesCompatRelease',
                         'compileNonpayUnitedStatesCompatReleaseUnitTestSources',
                         ':core:compileUnitedStatesReleaseUnitTestSources',
//                         'lintNonpayUnitedStatesCompatRelease',
//                         ':core:lintUnitedStatesRelease',
                         'testNonpayUnitedStatesCompatReleaseUnitTest',
                         'testNonpayUnitedStatesCompatReleaseUnitTestCoverage',
                         ':core:testUnitedStatesReleaseUnitTest',
                         ':core:testUnitedStatesReleaseUnitTestCoverage']) {
    description = "For US: Build, runs unit tests, instrumentation tests and lint check, assembles mexican debug and release version"
}


task(info) << {
    logging.captureStandardOutput LogLevel.LIFECYCLE
    println ">>> I am " + (isJenkins ? "" : "NOT ") + "running on Jenkins and do " + (isProduction ? "" : "NOT ") + "create a production release <<<"
}
preBuild.dependsOn += info